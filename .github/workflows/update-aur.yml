name: Update AUR Package

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  update-aur:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get release tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
        else
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/TC999/zed-loc/releases/latest)
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r .tag_name)
        fi
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
        
    - name: Check release type
      id: check
      run: |
        RELEASE_TAG="${{ steps.get_tag.outputs.RELEASE_TAG }}"
        if [[ "$RELEASE_TAG" =~ ^[0-9]{8}$ ]]; then
          echo "is_date_release=true" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "is_date_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup SSH for AUR
      if: steps.check.outputs.is_date_release == 'true'
      run: |
        # 创建SSH目录
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # 将私钥写入文件
        echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur_key
        chmod 600 ~/.ssh/aur_key
        
        # 获取并添加AUR服务器的主机密钥
        ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        # 验证主机密钥
        echo "AUR服务器主机密钥:"
        grep aur.archlinux.org ~/.ssh/known_hosts
        
        # 测试连接（忽略第一次的警告）
        echo "测试SSH连接..."
        ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/aur_key aur@aur.archlinux.org || true
        
    - name: Update AUR package
      if: steps.check.outputs.is_date_release == 'true'
      env:
        GIT_SSH_COMMAND: "ssh -i ~/.ssh/aur_key -o UserKnownHostsFile=~/.ssh/known_hosts"
      run: |
        set -e
        echo "开始更新AUR包到版本: ${{ steps.check.outputs.release_tag }}"
        
        # 配置Git用户
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # 克隆AUR仓库
        echo "克隆AUR仓库..."
        git clone ssh://aur@aur.archlinux.org/zed-cn.git aur-repo
        cd aur-repo
        
        LATEST_TAG="${{ steps.check.outputs.release_tag }}"
        DOWNLOAD_URL="https://github.com/TC999/zed-loc/releases/download/$LATEST_TAG/zed-linux-x86_64.tar.gz"
        
        echo "更新PKGBUILD到版本: $LATEST_TAG"
        # 更新PKGBUILD
        sed -i "s/^pkgver=.*/pkgver=$LATEST_TAG/" PKGBUILD
        sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
        
        # 计算校验和
        echo "计算SHA256校验和..."
        NEW_SHA256=$(curl -L -f "$DOWNLOAD_URL" | sha256sum | awk '{print $1}')
        echo "新校验和: $NEW_SHA256"
        sed -i "s/^sha256sums=.*/sha256sums=('$NEW_SHA256')/" PKGBUILD
        
        # 更新.SRCINFO
        echo "生成.SRCINFO文件..."
        makepkg --printsrcinfo > .SRCINFO
        
        # 检查是否有更改
        if git status --porcelain | grep -q .; then
          echo "检测到更改，提交更新..."
          git add PKGBUILD .SRCINFO
          git commit -m "Update to $LATEST_TAG"
          git push
          echo "✅ AUR包更新完成!"
        else
          echo "⚠️ 没有检测到更改，跳过提交"
        fi
