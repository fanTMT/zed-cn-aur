name: 自动更新TC999.zed-loc

on:
  release:
    types: [published]
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'
    
jobs:
  aur-publish:
    runs-on: ubuntu-latest
    name: 上传到AUR
    steps:
      # 第一步：获取版本信息并检查
      - name: 从latest接口获取最新版本
        id: get_latest_tag
        run: |
          # 使用 /releases/latest 接口直接获取最新的正式版
          LATEST_RELEASE_JSON=$(curl -s "https://api.github.com/repos/TC999/zed-loc/releases/latest")
          
          # 从返回的JSON中提取tag_name字段
          RELEASE_TAG=$(echo "$LATEST_RELEASE_JSON" | jq -r '.tag_name')
          
          # 检查获取到的版本号是否为空
          if [ -z "$RELEASE_TAG" ] || [ "$RELEASE_TAG" = "null" ]; then
            echo "❌ 错误：未能从latest接口获取到有效的版本号"
            exit 1
          fi
          
          echo "通过latest接口找到的最新版本: $RELEASE_TAG"
          
          # 检查版本号是否为纯日期格式 (8位数字)
          if [[ ! "$RELEASE_TAG" =~ ^[0-9]{8}$ ]]; then
            echo "❌ 版本号 '$RELEASE_TAG' 不符合纯日期格式 (需要8位数字)"
            exit 1
          fi
          
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          
      # 第二步：生成 PKGBUILD 文件
      - name: 生成 PKGBUILD 文件
        id: generate_pkgbuild
        run: |
          RELEASE_TAG="${{ steps.get_latest_tag.outputs.RELEASE_TAG }}"
          DOWNLOAD_URL="https://github.com/TC999/zed-loc/releases/download/$RELEASE_TAG/zed-linux-x86_64.tar.gz"
          
          echo "正在计算文件校验和..."
          NEW_SHA512=$(curl -L -f "$DOWNLOAD_URL" | sha512sum | awk '{print $1}')
          echo "版本: $RELEASE_TAG"
          echo "SHA512: $NEW_SHA512"
          
          # 逐行生成 PKGBUILD 文件
          echo '# Maintainer: li0shang <li0shang@163.com>' > PKGBUILD
          echo 'pkgname="zed-cn"' >> PKGBUILD
          echo "pkgver=\"$RELEASE_TAG\"" >> PKGBUILD
          echo 'pkgrel=1' >> PKGBUILD
          echo 'pkgdesc=" zed-loc (Zed 汉化) github-TC999/zed-loc"' >> PKGBUILD
          echo "arch=('x86_64')" >> PKGBUILD
          echo 'license=("custom:Copyright (c) 2015 Abner Lee All Rights Reserved.")' >> PKGBUILD
          echo 'url="https://github.com/TC999/zed-loc"' >> PKGBUILD
          echo 'provides=("$pkgname")' >> PKGBUILD
          echo 'conflicts=("$pkgname")' >> PKGBUILD
          echo "source=(\"\$pkgname-\$pkgver.tar.gz::$DOWNLOAD_URL\")" >> PKGBUILD
          echo "sha512sums=('$NEW_SHA512')" >> PKGBUILD
          echo '' >> PKGBUILD
          echo '# 解压源码包' >> PKGBUILD
          echo 'prepare() {' >> PKGBUILD
          echo '  tar -xzf "$pkgname-$pkgver.tar.gz"' >> PKGBUILD
          echo '}' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '# 安装到 /opt' >> PKGBUILD
          echo 'package() {' >> PKGBUILD
          echo '  # 创建目标目录' >> PKGBUILD
          echo '  install -d "$pkgdir/opt/$pkgname"' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 复制所有文件到 /opt/软件名' >> PKGBUILD
          echo '  cp -r "$srcdir/zed-dev.app/"* "$pkgdir/opt/$pkgname/"' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 设置权限（可选）' >> PKGBUILD
          echo '  # find "$pkgdir/opt/$pkgname" -type d -exec chmod 755 {} \;' >> PKGBUILD
          echo '  # find "$pkgdir/opt/$pkgname" -type f -exec chmod 644 {} \;' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 如果需要：添加可执行文件到系统路径' >> PKGBUILD
          echo '  install -d "$pkgdir/usr/bin"' >> PKGBUILD
          echo '  ln -s "/opt/$pkgname/bin/zed" "$pkgdir/usr/bin/zed"' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 安装图标文件' >> PKGBUILD
          echo '  _icon_sizes=("512x512" "1024x1024")' >> PKGBUILD
          echo '  for size in "${_icon_sizes[@]}"; do' >> PKGBUILD
          echo '    if [ -f "$srcdir/zed-dev.app/share/icons/hicolor/$size/apps/zed.png" ]; then' >> PKGBUILD
          echo '      install -Dm644 "$srcdir/zed-dev.app/share/icons/hicolor/$size/apps/zed.png" \' >> PKGBUILD
          echo '        "$pkgdir/usr/share/icons/hicolor/$size/apps/zed-cn.png"' >> PKGBUILD
          echo '    fi' >> PKGBUILD
          echo '  done' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 如果需要：桌面文件' >> PKGBUILD
          echo '  install -Dm644 "$srcdir/zed-dev.app/share/applications/zed-dev.desktop" "$pkgdir/usr/share/applications/zed-cn.desktop"' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '  # 移除调试符号（避免生成debug包）' >> PKGBUILD
          echo '  find "$pkgdir" -name "*.debug" -delete' >> PKGBUILD
          echo '  strip --strip-all "$pkgdir/opt/$pkgname/bin/zed" 2>/dev/null || true' >> PKGBUILD
          echo '  strip --strip-all "$pkgdir/opt/$pkgname/libexec/zed-editor" 2>/dev/null || true' >> PKGBUILD
          echo '' >> PKGBUILD
          echo '}' >> PKGBUILD
          echo '# 明确指定不构建debug包' >> PKGBUILD
          echo "options=('!debug')" >> PKGBUILD
          
          echo "生成的 PKGBUILD 内容："
          cat PKGBUILD
          
      - name: 发布到 AUR
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.0
        with:
          pkgname: zed-cn
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update to ${{ steps.get_tag.outputs.RELEASE_TAG }}
          ssh_keyscan_types: rsa,ecdsa,ed25519

